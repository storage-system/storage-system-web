/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthenticateController_handle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CompanyController_list"];
        put?: never;
        post: operations["CompanyController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CompanyController_delete"];
        options?: never;
        head?: never;
        patch: operations["CompanyController_update"];
        trace?: never;
    };
    "/api/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CategoryController_list"];
        put?: never;
        post: operations["CategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CategoryController_delete"];
        options?: never;
        head?: never;
        patch: operations["CategoryController_update"];
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_list"];
        put?: never;
        post: operations["UserController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UserController_delete"];
        options?: never;
        head?: never;
        patch: operations["UserController_update"];
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ProductController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_downloadTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/company/{companyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/company/{companyId}/stock-movements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_getStockMovements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_getById"];
        put?: never;
        post?: never;
        delete: operations["ProductController_delete"];
        options?: never;
        head?: never;
        patch: operations["ProductController_update"];
        trace?: never;
    };
    "/api/products/{id}/update-stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ProductController_updateStock"];
        trace?: never;
    };
    "/api/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ConfigurationController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configurations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ConfigurationController_getConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ConfigurationController_update"];
        trace?: never;
    };
    "/api/styles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["StyleController_list"];
        put?: never;
        post: operations["StyleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/styles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["StyleController_getById"];
        put?: never;
        post?: never;
        delete: operations["StyleController_delete"];
        options?: never;
        head?: never;
        patch: operations["StyleController_update"];
        trace?: never;
    };
    "/api/styles/{id}/active-style": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["StyleController_chooseActiveStyle"];
        trace?: never;
    };
    "/api/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["FileController_uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/url/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FileController_getFileUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/download/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FileController_downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/delete/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["FileController_deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MetricsController_productMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InviteController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InviteController_accept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites/pendings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InviteController_getPendings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites/revoke/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["InviteController_revoke"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthenticateDTO: {
            /** Format: email */
            email: string;
            password: string;
        };
        CreateCompanyDTO: {
            tradeName: string;
            corporateName: string;
            /** Format: email */
            email: string;
            cnpj: string;
            contact: string;
            /** Format: uuid */
            responsibleId: string;
            address: {
                street: string;
                number?: string;
                zipCode?: string;
                neighborhood?: string;
                city: string;
                state: string;
                country: string;
                complement?: string;
            };
        };
        EditCompanyDTO: {
            tradeName?: string;
            corporateName?: string;
            cnpj?: string;
            email?: string;
            contact?: string;
        };
        CreateCategoryDTO: {
            name: string;
            isActive: boolean;
            /** Format: uuid */
            fileId?: string;
        };
        HttpEachCategoryListResponse: {
            /** @example 234159c0-a757-4fd5-99f8-9d25c29b8526 */
            id: string;
            name: string;
            isActive?: boolean;
            iconId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        HttpCategoryListResponse: {
            total: number;
            perPage: number;
            page: number;
            items: components["schemas"]["HttpEachCategoryListResponse"][];
        };
        UpdateCategoryDTO: {
            name?: string;
            isActive?: boolean;
            /** Format: uuid */
            companyId: string;
        };
        CreateUserDTO: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
            phone: string;
            roles?: ("ADMIN" | "MANAGER" | "DIRECTOR" | "RESPONSIBLE" | "MEMBER")[];
        };
        UpdateUserDTO: {
            name?: string;
            /** Format: email */
            email?: string;
            password?: string;
            phone?: string;
            roles?: ("ADMIN" | "MANAGER" | "DIRECTOR" | "RESPONSIBLE" | "MEMBER")[];
        };
        CreateProductDTO: {
            name: string;
            description: string;
            fileIds: string[];
            originalPrice: number;
            finalPrice: number;
            discountPercentage: number;
            quantityInStock: number;
            minimumStock: number;
            manufactureDate: string;
            validityInDays: number;
            unitOfMeasure: string;
            weight: number;
            height: string;
            width: string;
            depth: string;
            manufacturer?: string;
            batch?: string;
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE" | "OUT_OF_STOCK";
            categoryIds: string[];
        };
        HttpItemResponse: {
            /** @example c53bbfb6-b648-4b0c-8758-e94166c239d2 */
            id: string;
            /** @example Johnnie Frami */
            name: string;
        };
        HttpEachProductListResponse: {
            /** @example 742ffa6d-a408-4b56-9064-18d58dd678c0 */
            id: string;
            name: string;
            quantityInStock: number;
            /** Format: date-time */
            manufactureDate: string;
            /** Format: date-time */
            dueDate: string;
            validityInDays: number;
            manufacturer: string;
            batch: string;
            /** @example ACTIVE */
            status: string;
            productImage: string;
            categories: components["schemas"]["HttpItemResponse"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        HttpProductListResponse: {
            total: number;
            perPage: number;
            page: number;
            items: components["schemas"]["HttpEachProductListResponse"][];
        };
        HttpProductGetResponse: {
            /** @example e50a8846-50b6-48e7-b17c-565503224aba */
            id: string;
            name: string;
            description: string;
            originalPrice: number;
            finalPrice: number;
            discountPercentage: number;
            quantityInStock: number;
            /** Format: date-time */
            manufactureDate: string;
            /** Format: date-time */
            dueDate: string;
            validityInDays: number;
            unitOfMeasure: string;
            weight: number;
            manufacturer: string;
            batch: string;
            /** @example ACTIVE */
            status: string;
            productImage: string;
            categories: components["schemas"]["HttpItemResponse"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        UpdateProductDTO: {
            name?: string;
            description?: string;
            fileIds?: string[];
            originalPrice?: number;
            finalPrice?: number;
            discountPercentage?: number;
            quantityInStock?: number;
            minimumStock?: number;
            manufactureDate?: string;
            validityInDays?: number;
            unitOfMeasure?: string;
            weight?: number;
            height?: string;
            width?: string;
            depth?: string;
            manufacturer?: string;
            batch?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "OUT_OF_STOCK";
            categoryIds?: string[];
        };
        UpdateProductStockDTO: {
            quantity: number;
            /** @enum {string} */
            operation: "INCREASE" | "DECREASE";
            performedBy: string;
        };
        CreateConfigurationDTO: {
            /** Format: uuid */
            userId: string;
            /** Format: uuid */
            companyId: string;
            daysBeforeOldStock: number;
            warningDays: number;
            emailNotification: boolean;
            systemNotification: boolean;
            autoDiscardAfterExpiration: boolean;
            freeShippingOnOldStock: boolean;
            /** @enum {string} */
            reportFrequency: "diary" | "weekly" | "month" | "year";
        };
        HttpConfigurationGetResponse: {
            /** @example a237446e-033f-4de7-a4ae-db1ae56436ce */
            id: string;
            /** @example 8bb981a5-9f40-4b2a-81ab-817d91fd4b8e */
            userId: string;
            /** @example 02f3d917-ff01-422a-afee-81803b694c0d */
            companyId: string;
            daysBeforeOldStock: number;
            warningDays: number;
            emailNotification: boolean;
            systemNotification: boolean;
            autoDiscardAfterExpiration: boolean;
            freeShippingOnOldStock: boolean;
            /** @example diary */
            reportFrequency: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UpdateConfigurationDTO: {
            daysBeforeOldStock?: number;
            warningDays?: number;
            emailNotification?: boolean;
            systemNotification?: boolean;
            autoDiscardAfterExpiration?: boolean;
            freeShippingOnOldStock?: boolean;
            /** @enum {string} */
            reportFrequency?: "diary" | "weekly" | "month" | "year";
        };
        CreateStyleDTO: {
            name: string;
            /** @default false */
            isActive: boolean;
            backgroundColor: string;
            textColor: string;
            primaryColor: string;
            secondaryColor: string;
            tertiaryColor: string;
        };
        HttpEachStyleListResponse: {
            /** @example fd5e6a5a-cd88-49e0-b636-bb73ed51171a */
            id: string;
            /** @example e45d5cd8-f09b-498e-8801-113e137fedd5 */
            companyId: string;
            name: string;
            isActive?: boolean;
            backgroundColor: string;
            textColor: string;
            primaryColor: string;
            secondaryColor: string;
            tertiaryColor: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        HttpStyleListResponse: {
            total: number;
            perPage: number;
            page: number;
            items: components["schemas"]["HttpEachStyleListResponse"][];
        };
        HttpStyleGetResponse: {
            /** @example 7bfc1700-a6d1-4044-bbd5-35fd1ed3b194 */
            id: string;
            /** @example 8f249000-f494-4ae0-8aef-63d94dbadd3f */
            companyId: string;
            name: string;
            isActive?: boolean;
            backgroundColor: string;
            textColor: string;
            primaryColor: string;
            secondaryColor: string;
            tertiaryColor: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UpdateStyleDTO: {
            name?: string;
            backgroundColor?: string;
            textColor?: string;
            primaryColor?: string;
            secondaryColor?: string;
            tertiaryColor?: string;
        };
        HttpFileCreatedResponse: {
            /** @example c6b5808b-e915-4714-bfa5-6f68ba355267 */
            id: string;
        };
        HttpGetFileUrlResponse: {
            /** @example string */
            fileUrl: string;
        };
        HttpOldStockMetricsResponse: {
            totalProductOldStock: number;
            totalOldStockValue: number;
            expiringIn30Days: number;
            expiringIn60Days: number;
            expiringIn90Days: number;
        };
        HttpProductsMetricsResponse: {
            totalStockQuantity: number;
            totalStockValue: number;
            productsInWarningDays: number;
        };
        HttpGetMetricsResponse: {
            oldStockMetrics: components["schemas"]["HttpOldStockMetricsResponse"];
            productMetrics: components["schemas"]["HttpProductsMetricsResponse"];
        };
        CreateInviteDTO: {
            /** Format: email */
            email: string;
            roles?: string[];
            /** Format: uuid */
            authorId: string;
        };
        AcceptInviteDTO: {
            /** Format: uuid */
            inviteId: string;
            userAccount: {
                name: string;
                password: string;
                phone: string;
            };
        };
        HttpInviteGetResponse: {
            /** @example 353f7fc6-d033-42ad-8bf8-d3c3a4537ad7 */
            id: string;
            /** @example Jaden48@yahoo.com */
            email: string;
            /** @example [
             *       "MEMBER"
             *     ] */
            roles: string[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresIn?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthenticateController_handle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticateDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompanyDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditCompanyDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_list: {
        parameters: {
            query: {
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpCategoryListResponse"];
                };
            };
        };
    };
    CategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_downloadTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpProductListResponse"];
                };
            };
        };
    };
    ProductController_getStockMovements: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpProductListResponse"];
                };
            };
        };
    };
    ProductController_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpProductGetResponse"];
                };
            };
        };
    };
    ProductController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_updateStock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductStockDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConfigurationController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConfigurationDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConfigurationController_getConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpConfigurationGetResponse"];
                };
            };
        };
    };
    ConfigurationController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateConfigurationDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_list: {
        parameters: {
            query?: {
                perPage?: number;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpStyleListResponse"];
                };
            };
        };
    };
    StyleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStyleDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpStyleGetResponse"];
                };
            };
        };
    };
    StyleController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStyleDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_chooseActiveStyle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FileController_uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpFileCreatedResponse"];
                };
            };
        };
    };
    FileController_getFileUrl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpGetFileUrlResponse"];
                };
            };
        };
    };
    FileController_downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FileController_deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MetricsController_productMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpGetMetricsResponse"];
                };
            };
        };
    };
    InviteController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInviteDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InviteController_accept: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AcceptInviteDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InviteController_getPendings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpInviteGetResponse"][];
                };
            };
        };
    };
    InviteController_revoke: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
