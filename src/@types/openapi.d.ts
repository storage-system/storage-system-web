/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/sessions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['AuthenticateController_handle']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/companies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['CompanyController_list']
    put?: never
    post: operations['CompanyController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/companies/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete: operations['CompanyController_delete']
    options?: never
    head?: never
    patch: operations['CompanyController_update']
    trace?: never
  }
  '/api/categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['CategoryController_list']
    put?: never
    post: operations['CategoryController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/categories/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete: operations['CategoryController_delete']
    options?: never
    head?: never
    patch: operations['CategoryController_update']
    trace?: never
  }
  '/api/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['UserController_list']
    put?: never
    post: operations['UserController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete: operations['UserController_delete']
    options?: never
    head?: never
    patch: operations['UserController_update']
    trace?: never
  }
  '/api/products': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['ProductController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/products/template': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['ProductController_downloadTemplate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/products/company/{companyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['ProductController_list']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/products/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['ProductController_getById']
    put?: never
    post?: never
    delete: operations['ProductController_delete']
    options?: never
    head?: never
    patch: operations['ProductController_update']
    trace?: never
  }
  '/api/products/{id}/update-stock': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations['ProductController_updateStock']
    trace?: never
  }
  '/api/configurations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['ConfigurationController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/configurations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['ConfigurationController_getConfiguration']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations['ConfigurationController_update']
    trace?: never
  }
  '/api/styles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['StyleController_list']
    put?: never
    post: operations['StyleController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/styles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['StyleController_getById']
    put?: never
    post?: never
    delete: operations['StyleController_delete']
    options?: never
    head?: never
    patch: operations['StyleController_update']
    trace?: never
  }
  '/api/styles/{id}/active-style': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations['StyleController_chooseActiveStyle']
    trace?: never
  }
  '/api/files/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['FileController_uploadFile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/files/url/{fileId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['FileController_getFileUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/files/download/{fileId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['FileController_downloadFile']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/files/delete/{fileId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete: operations['FileController_deleteFile']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/metrics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['MetricsController_productMetrics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/invites': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['InviteController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/invites/accept': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post: operations['InviteController_accept']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/invites/pendings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['InviteController_getPendings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/invites/revoke/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch: operations['InviteController_revoke']
    trace?: never
  }
  '/api/ecommerce': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['EcommerceController_getEcommerce']
    put?: never
    post: operations['EcommerceController_publishEcommerce']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    AuthenticateDTO: {
      /** Format: email */
      email: string
      password: string
    }
    CreateCompanyDTO: {
      tradeName: string
      corporateName: string
      /** Format: email */
      email: string
      cnpj: string
      contact: string
      /** Format: uuid */
      responsibleId: string
      address: {
        street: string
        number?: string
        zipCode?: string
        neighborhood?: string
        city: string
        state: string
        country: string
        complement?: string
      }
    }
    EditCompanyDTO: {
      tradeName?: string
      corporateName?: string
      cnpj?: string
      email?: string
      contact?: string
    }
    CreateCategoryDTO: {
      name: string
      isActive: boolean
      /** Format: uuid */
      fileId?: string
    }
    HttpEachCategoryListResponse: {
      /** @example 9cba6c8c-86f2-4ef0-bff6-f4e5f843b15e */
      id: string
      name: string
      isActive?: boolean
      iconId: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string
    }
    HttpCategoryListResponse: {
      total: number
      perPage: number
      page: number
      items: components['schemas']['HttpEachCategoryListResponse'][]
    }
    UpdateCategoryDTO: {
      name?: string
      isActive?: boolean
      /** Format: uuid */
      companyId: string
    }
    CreateUserDTO: {
      name: string
      /** Format: email */
      email: string
      password: string
      phone: string
      roles?: ('ADMIN' | 'MANAGER' | 'DIRECTOR' | 'RESPONSIBLE' | 'MEMBER')[]
    }
    UpdateUserDTO: {
      name?: string
      /** Format: email */
      email?: string
      password?: string
      phone?: string
      roles?: ('ADMIN' | 'MANAGER' | 'DIRECTOR' | 'RESPONSIBLE' | 'MEMBER')[]
    }
    CreateProductDTO: {
      name: string
      description: string
      fileIds: string[]
      originalPrice: number
      finalPrice: number
      discountPercentage: number
      quantityInStock: number
      minimumStock: number
      manufactureDate: string
      validityInDays: number
      unitOfMeasure: string
      weight: number
      height: string
      width: string
      depth: string
      manufacturer?: string
      batch?: string
      /** @enum {string} */
      status: 'ACTIVE' | 'INACTIVE' | 'OUT_OF_STOCK'
      categoryIds: string[]
    }
    HttpItemResponse: {
      /** @example e8531546-1390-4efe-8786-dbf890acdd94 */
      id: string
      /** @example Kim Schneider */
      name: string
    }
    HttpEachProductListResponse: {
      /** @example 3ab753f3-1af8-4053-95cc-33031a781523 */
      id: string
      name: string
      quantityInStock: number
      /** Format: date-time */
      manufactureDate: string
      /** Format: date-time */
      dueDate: string
      validityInDays: number
      manufacturer: string
      batch: string
      /** @example ACTIVE */
      status: string
      productImage: string
      categories: components['schemas']['HttpItemResponse'][]
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      deletedAt?: string
    }
    HttpProductListResponse: {
      total: number
      perPage: number
      page: number
      items: components['schemas']['HttpEachProductListResponse'][]
    }
    HttpProductGetResponse: {
      /** @example 2fbe514c-762a-4631-b53e-961ac87bfcf9 */
      id: string
      name: string
      description: string
      originalPrice: number
      finalPrice: number
      discountPercentage: number
      quantityInStock: number
      /** Format: date-time */
      manufactureDate: string
      /** Format: date-time */
      dueDate: string
      validityInDays: number
      unitOfMeasure: string
      weight: number
      manufacturer: string
      batch: string
      /** @example ACTIVE */
      status: string
      productImage: string
      categories: components['schemas']['HttpItemResponse'][]
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string
      /** Format: date-time */
      deletedAt?: string
    }
    UpdateProductDTO: {
      name?: string
      description?: string
      fileIds?: string[]
      originalPrice?: number
      finalPrice?: number
      discountPercentage?: number
      quantityInStock?: number
      minimumStock?: number
      manufactureDate?: string
      validityInDays?: number
      unitOfMeasure?: string
      weight?: number
      height?: string
      width?: string
      depth?: string
      manufacturer?: string
      batch?: string
      /** @enum {string} */
      status?: 'ACTIVE' | 'INACTIVE' | 'OUT_OF_STOCK'
      categoryIds?: string[]
    }
    UpdateProductStockDTO: {
      quantity: number
      /** @enum {string} */
      operation: 'increase' | 'decrease'
    }
    CreateConfigurationDTO: {
      /** Format: uuid */
      userId: string
      /** Format: uuid */
      companyId: string
      daysBeforeOldStock: number
      warningDays: number
      emailNotification: boolean
      systemNotification: boolean
      autoDiscardAfterExpiration: boolean
      freeShippingOnOldStock: boolean
      /** @enum {string} */
      reportFrequency: 'diary' | 'weekly' | 'month' | 'year'
    }
    HttpConfigurationGetResponse: {
      /** @example 6e27b715-7645-4778-87bd-7fa12efc1363 */
      id: string
      /** @example 156df032-63aa-431a-8c04-9ce895bc85dd */
      userId: string
      /** @example 837d0a94-e772-4a99-a4b7-b5650ca0b9df */
      companyId: string
      daysBeforeOldStock: number
      warningDays: number
      emailNotification: boolean
      systemNotification: boolean
      autoDiscardAfterExpiration: boolean
      freeShippingOnOldStock: boolean
      /** @example diary */
      reportFrequency: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string
    }
    UpdateConfigurationDTO: {
      daysBeforeOldStock?: number
      warningDays?: number
      emailNotification?: boolean
      systemNotification?: boolean
      autoDiscardAfterExpiration?: boolean
      freeShippingOnOldStock?: boolean
      /** @enum {string} */
      reportFrequency?: 'diary' | 'weekly' | 'month' | 'year'
    }
    CreateStyleDTO: {
      name: string
      /** @default false */
      isActive: boolean
      backgroundColor: string
      textColor: string
      primaryColor: string
      secondaryColor: string
      tertiaryColor: string
    }
    HttpEachStyleListResponse: {
      /** @example 0da7549a-265a-47ba-b3be-3cd5e6a7c978 */
      id: string
      /** @example 86616f51-283f-46b2-8769-7d5544b312bf */
      companyId: string
      name: string
      isActive?: boolean
      backgroundColor: string
      textColor: string
      primaryColor: string
      secondaryColor: string
      tertiaryColor: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string
    }
    HttpStyleListResponse: {
      total: number
      perPage: number
      page: number
      items: components['schemas']['HttpEachStyleListResponse'][]
    }
    HttpStyleGetResponse: {
      /** @example 6f39d2fc-8921-473f-b6fa-a29c06f12322 */
      id: string
      /** @example 4b140c57-446b-4c16-86ec-861cc2e63e4a */
      companyId: string
      name: string
      isActive?: boolean
      backgroundColor: string
      textColor: string
      primaryColor: string
      secondaryColor: string
      tertiaryColor: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt?: string
    }
    UpdateStyleDTO: {
      name?: string
      backgroundColor?: string
      textColor?: string
      primaryColor?: string
      secondaryColor?: string
      tertiaryColor?: string
    }
    HttpFileCreatedResponse: {
      /** @example 797bccff-142d-46ec-a5d0-9219bdb51236 */
      id: string
    }
    HttpGetFileUrlResponse: {
      /** @example string */
      fileUrl: string
    }
    HttpOldStockMetricsResponse: {
      totalProductOldStock: number
      totalOldStockValue: number
      expiringIn30Days: number
      expiringIn60Days: number
      expiringIn90Days: number
    }
    HttpProductsMetricsResponse: {
      totalStockQuantity: number
      totalStockValue: number
      productsInWarningDays: number
    }
    HttpGetMetricsResponse: {
      oldStockMetrics: components['schemas']['HttpOldStockMetricsResponse']
      productMetrics: components['schemas']['HttpProductsMetricsResponse']
    }
    CreateInviteDTO: {
      /** Format: email */
      email: string
      roles?: string[]
      /** Format: uuid */
      authorId: string
    }
    AcceptInviteDTO: {
      /** Format: uuid */
      inviteId: string
      userAccount: {
        name: string
        password: string
        phone: string
      }
    }
    HttpInviteGetResponse: {
      /** @example 5c0ef91d-f956-4ce9-93aa-5fd2a0868ff2 */
      id: string
      /** @example Isobel51@gmail.com */
      email: string
      /** @example [
       *       "MEMBER"
       *     ] */
      roles: string[]
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      expiresIn?: string
    }
    PublishEcommerceDTO: {
      name: string
      style?: {
        name: string
        /** @default false */
        isActive: boolean
        backgroundColor: string
        textColor: string
        primaryColor: string
        secondaryColor: string
        tertiaryColor: string
      }
    }
    RetrieveEcommerceByCompanyIdDTO: {
      /** Format: uuid */
      id: string
      name: string
      slug: string
      isActive: boolean
      createdAt: string
      updatedAt: string
      deletedAt: string | null
      /** Format: uuid */
      companyId: string
      styles: {
        /** Format: uuid */
        id: string
        name: string
        isActive: boolean
        backgroundColor: string
        textColor: string
        primaryColor: string
        secondaryColor: string
        tertiaryColor: string
        /** Format: uuid */
        companyId: string
        createdAt: string
        updatedAt: string
        deletedAt: string | null
        /** Format: uuid */
        ecommerceId: string
      }[]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AuthenticateController_handle: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthenticateDTO']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CompanyController_list: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CompanyController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCompanyDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CompanyController_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CompanyController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EditCompanyDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CategoryController_list: {
    parameters: {
      query: {
        page: number
        perPage: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpCategoryListResponse']
        }
      }
    }
  }
  CategoryController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCategoryDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CategoryController_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CategoryController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCategoryDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_list: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProductDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductController_downloadTemplate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductController_list: {
    parameters: {
      query?: never
      header?: never
      path: {
        companyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpProductListResponse']
        }
      }
    }
  }
  ProductController_getById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpProductGetResponse']
        }
      }
    }
  }
  ProductController_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProductDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProductController_updateStock: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProductStockDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ConfigurationController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateConfigurationDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ConfigurationController_getConfiguration: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpConfigurationGetResponse']
        }
      }
    }
  }
  ConfigurationController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateConfigurationDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StyleController_list: {
    parameters: {
      query?: {
        perPage?: number
        page?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpStyleListResponse']
        }
      }
    }
  }
  StyleController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStyleDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StyleController_getById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpStyleGetResponse']
        }
      }
    }
  }
  StyleController_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StyleController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStyleDTO']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StyleController_chooseActiveStyle: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FileController_uploadFile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpFileCreatedResponse']
        }
      }
    }
  }
  FileController_getFileUrl: {
    parameters: {
      query?: never
      header?: never
      path: {
        fileId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpGetFileUrlResponse']
        }
      }
    }
  }
  FileController_downloadFile: {
    parameters: {
      query?: never
      header?: never
      path: {
        fileId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FileController_deleteFile: {
    parameters: {
      query?: never
      header?: never
      path: {
        fileId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MetricsController_productMetrics: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpGetMetricsResponse']
        }
      }
    }
  }
  InviteController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateInviteDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InviteController_accept: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AcceptInviteDTO']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InviteController_getPendings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HttpInviteGetResponse'][]
        }
      }
    }
  }
  InviteController_revoke: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  EcommerceController_getEcommerce: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Ecommerce retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RetrieveEcommerceByCompanyIdDTO']
        }
      }
    }
  }
  EcommerceController_publishEcommerce: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PublishEcommerceDTO']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
