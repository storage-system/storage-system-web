/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthenticateController_handle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CompanyController_list"];
        put?: never;
        post: operations["CompanyController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CompanyController_delete"];
        options?: never;
        head?: never;
        patch: operations["CompanyController_update"];
        trace?: never;
    };
    "/api/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CategoryController_list"];
        put?: never;
        post: operations["CategoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["CategoryController_delete"];
        options?: never;
        head?: never;
        patch: operations["CategoryController_update"];
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_list"];
        put?: never;
        post: operations["UserController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UserController_delete"];
        options?: never;
        head?: never;
        patch: operations["UserController_update"];
        trace?: never;
    };
    "/api/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ProductController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_downloadTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/company/{companyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/company/{companyId}/stock-movements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_getStockMovements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController_getById"];
        put?: never;
        post?: never;
        delete: operations["ProductController_delete"];
        options?: never;
        head?: never;
        patch: operations["ProductController_update"];
        trace?: never;
    };
    "/api/products/{id}/update-stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ProductController_updateStock"];
        trace?: never;
    };
    "/api/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ConfigurationController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configurations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ConfigurationController_getConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ConfigurationController_update"];
        trace?: never;
    };
    "/api/styles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["StyleController_list"];
        put?: never;
        post: operations["StyleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/styles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["StyleController_getById"];
        put?: never;
        post?: never;
        delete: operations["StyleController_delete"];
        options?: never;
        head?: never;
        patch: operations["StyleController_update"];
        trace?: never;
    };
    "/api/styles/{id}/active-style": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["StyleController_chooseActiveStyle"];
        trace?: never;
    };
    "/api/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["FileController_uploadFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/url/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FileController_getFileUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/download/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FileController_downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/files/delete/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["FileController_deleteFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/old-stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MetricsController_productMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/stock-general": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MetricsController_stockGeneralMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InviteController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InviteController_accept"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites/pendings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InviteController_getPendings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invites/revoke/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["InviteController_revoke"];
        trace?: never;
    };
    "/api/ecommerce/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EcommerceController_publishEcommerce"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ecommerce": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EcommerceController_retrieveEcommerceByCompanyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["EcommerceController_updateEcommerce"];
        trace?: never;
    };
    "/api/ecommerce/update-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["EcommerceController_updateProducts"];
        trace?: never;
    };
    "/api/ecommerce/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EcommerceController_retrieveEcommerce"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ecommerce/{slug}/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EcommerceController_listProducts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ecommerce/{slug}/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EcommerceController_getProduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ecommerce/{slug}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EcommerceController_listCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuthenticateDTO: {
            /** Format: email */
            email: string;
            password: string;
        };
        CreateCompanyDTO: {
            tradeName: string;
            corporateName: string;
            /** Format: email */
            email: string;
            cnpj: string;
            contact: string;
            /** Format: uuid */
            responsibleId: string;
            address: {
                street: string;
                number?: string;
                zipCode?: string;
                neighborhood?: string;
                city: string;
                state: string;
                country: string;
                complement?: string;
            };
        };
        EditCompanyDTO: {
            tradeName?: string;
            corporateName?: string;
            cnpj?: string;
            email?: string;
            contact?: string;
        };
        CreateCategoryDTO: {
            name: string;
            isActive: boolean;
            /** Format: uuid */
            fileId?: string;
        };
        HttpEachCategoryListResponse: {
            /** @example 776fb4ba-b90f-499a-a9dc-0baf4ed00808 */
            id: string;
            name: string;
            isActive?: boolean;
            iconId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        HttpCategoryListResponse: {
            total: number;
            perPage: number;
            page: number;
            items: components["schemas"]["HttpEachCategoryListResponse"][];
        };
        UpdateCategoryDTO: {
            name?: string;
            isActive?: boolean;
            /** Format: uuid */
            companyId: string;
        };
        CreateUserDTO: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
            phone: string;
            roles?: ("ADMIN" | "MANAGER" | "DIRECTOR" | "RESPONSIBLE" | "MEMBER")[];
        };
        UpdateUserDTO: {
            name?: string;
            /** Format: email */
            email?: string;
            password?: string;
            phone?: string;
            roles?: ("ADMIN" | "MANAGER" | "DIRECTOR" | "RESPONSIBLE" | "MEMBER")[];
        };
        CreateProductDTO: {
            name: string;
            description: string;
            fileIds: string[];
            originalPrice: number;
            finalPrice: number;
            discountPercentage: number;
            quantityInStock: number;
            minimumStock: number;
            manufactureDate: string;
            validityInDays: number;
            unitOfMeasure: string;
            weight: number;
            height: string;
            width: string;
            depth: string;
            manufacturer?: string;
            batch?: string;
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE" | "OUT_OF_STOCK";
            categoryIds: string[];
        };
        HttpItemResponse: {
            /** @example e1a60bc5-bfed-4a7d-a70a-865136c5bb36 */
            id: string;
            /** @example Benny Herman */
            name: string;
        };
        HttpEachProductListResponse: {
            /** @example 46d9db4c-3f04-43d2-8db0-48b434b3826a */
            id: string;
            name: string;
            quantityInStock: number;
            /** Format: date-time */
            manufactureDate: string;
            /** Format: date-time */
            dueDate: string;
            validityInDays: number;
            manufacturer: string;
            batch: string;
            /** @example ACTIVE */
            status: string;
            productImage: string;
            categories: components["schemas"]["HttpItemResponse"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        HttpProductListResponse: {
            total: number;
            perPage: number;
            page: number;
            items: components["schemas"]["HttpEachProductListResponse"][];
        };
        HttpProductGetResponse: {
            /** @example cbcbc2de-5119-42b4-9cad-1e05f38fb243 */
            id: string;
            name: string;
            description: string;
            originalPrice: number;
            finalPrice: number;
            discountPercentage: number;
            quantityInStock: number;
            /** Format: date-time */
            manufactureDate: string;
            /** Format: date-time */
            dueDate: string;
            validityInDays: number;
            unitOfMeasure: string;
            weight: number;
            manufacturer: string;
            batch: string;
            /** @example ACTIVE */
            status: string;
            productImage: string;
            categories: components["schemas"]["HttpItemResponse"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        UpdateProductDTO: {
            name?: string;
            description?: string;
            fileIds?: string[];
            originalPrice?: number;
            finalPrice?: number;
            discountPercentage?: number;
            quantityInStock?: number;
            minimumStock?: number;
            manufactureDate?: string;
            validityInDays?: number;
            unitOfMeasure?: string;
            weight?: number;
            height?: string;
            width?: string;
            depth?: string;
            manufacturer?: string;
            batch?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "OUT_OF_STOCK";
            categoryIds?: string[];
        };
        UpdateProductStockDTO: {
            quantity: number;
            /** @enum {string} */
            operation: "INCREASE" | "DECREASE";
            performedBy: string;
        };
        CreateConfigurationDTO: {
            /** Format: uuid */
            userId: string;
            companyId: string;
            daysBeforeOldStock: number;
            warningDays: number;
            emailNotification: boolean;
            systemNotification: boolean;
            autoDiscardAfterExpiration: boolean;
            freeShippingOnOldStock: boolean;
            /** @enum {string} */
            reportFrequency: "diary" | "weekly" | "month" | "year";
        };
        HttpConfigurationGetResponse: {
            /** @example 1074fee7-7e3e-40a9-953b-b03d163534fc */
            id: string;
            /** @example b7c86ba3-bb19-4d02-9668-d8f1297b25de */
            userId: string;
            /** @example a9e81bf5-8238-4d94-bf84-e89c6e0d848b */
            companyId: string;
            daysBeforeOldStock: number;
            warningDays: number;
            emailNotification: boolean;
            systemNotification: boolean;
            autoDiscardAfterExpiration: boolean;
            freeShippingOnOldStock: boolean;
            /** @example diary */
            reportFrequency: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UpdateConfigurationDTO: {
            daysBeforeOldStock?: number;
            warningDays?: number;
            emailNotification?: boolean;
            systemNotification?: boolean;
            autoDiscardAfterExpiration?: boolean;
            freeShippingOnOldStock?: boolean;
            /** @enum {string} */
            reportFrequency?: "diary" | "weekly" | "month" | "year";
        };
        CreateStyleDTO: {
            name: string;
            /** @default false */
            isActive: boolean;
            backgroundColor: string;
            textColor: string;
            primaryColor: string;
            secondaryColor: string;
            tertiaryColor: string;
        };
        HttpEachStyleListResponse: {
            /** @example 0c47c233-1b57-4668-842a-634d0422a7cf */
            id: string;
            /** @example 940df3eb-70e4-4918-b359-be218794cf87 */
            companyId: string;
            name: string;
            isActive?: boolean;
            backgroundColor: string;
            textColor: string;
            primaryColor: string;
            secondaryColor: string;
            tertiaryColor: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        HttpStyleListResponse: {
            total: number;
            perPage: number;
            page: number;
            items: components["schemas"]["HttpEachStyleListResponse"][];
        };
        HttpStyleGetResponse: {
            /** @example 016b8175-16ec-4cfe-a683-95a55cf5e013 */
            id: string;
            /** @example 1d693bd0-624b-4877-bf44-b4ca10f319a7 */
            companyId: string;
            name: string;
            isActive?: boolean;
            backgroundColor: string;
            textColor: string;
            primaryColor: string;
            secondaryColor: string;
            tertiaryColor: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UpdateStyleDTO: {
            name?: string;
            backgroundColor?: string;
            textColor?: string;
            primaryColor?: string;
            secondaryColor?: string;
            tertiaryColor?: string;
        };
        HttpFileCreatedResponse: {
            /** @example 077a514e-29e7-47cc-b1f1-c613335b79a0 */
            id: string;
        };
        HttpGetFileUrlResponse: {
            /** @example string */
            fileUrl: string;
        };
        HttpOldStockMetricsResponse: {
            totalProductOldStock: number;
            totalOldStockValue: number;
            expiringIn30Days: number;
            expiringIn60Days: number;
            expiringIn90Days: number;
        };
        HttpProductsMetricsResponse: {
            totalStockQuantity: number;
            totalStockValue: number;
            productsInWarningDays: number;
        };
        HttpGetMetricsResponse: {
            oldStockMetrics: components["schemas"]["HttpOldStockMetricsResponse"];
            productMetrics: components["schemas"]["HttpProductsMetricsResponse"];
        };
        CategoryOverviewDto: {
            /** @example Bobinas de Aço */
            name: string;
            /** @example 5 */
            value: number;
            /** @example #8b5cf6 */
            color: string;
        };
        DateDataDto: {
            /** @example Jan/2025 */
            periodo: string;
            /** @example 100 */
            fabricacao: number;
            /** @example 90 */
            validade: number;
            /** @example 10 */
            vencidos: number;
        };
        StockGeneralMetricsResponseDto: {
            /** @example 1234 */
            totalProducts: number;
            /** @example 8 */
            activeCategories: number;
            /** @example 45678 */
            totalValue: number;
            /** @example 1199 */
            activeProducts: number;
            /** @example 35 */
            criticalStockProducts: number;
            /** @example 37 */
            validProducts: number;
            categoryOverview: components["schemas"]["CategoryOverviewDto"][];
            dateData: components["schemas"]["DateDataDto"][];
        };
        CreateInviteDTO: {
            /** Format: email */
            email: string;
            roles?: string[];
            /** Format: uuid */
            authorId: string;
        };
        AcceptInviteDTO: {
            /** Format: uuid */
            inviteId: string;
            userAccount: {
                name: string;
                password: string;
                phone: string;
            };
        };
        HttpInviteGetResponse: {
            /** @example f8490ea6-9025-45ae-831d-ba59bc8122ea */
            id: string;
            /** @example Waino.Balistreri@gmail.com */
            email: string;
            /** @example [
             *       "MEMBER"
             *     ] */
            roles: string[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresIn?: string;
        };
        PublishEcommerceDTO: {
            name: string;
            /** Format: uuid */
            ecommercePreview: string;
            style?: {
                name: string;
                /** @default false */
                isActive: boolean;
                backgroundColor: string;
                textColor: string;
                primaryColor: string;
                secondaryColor: string;
                tertiaryColor: string;
            };
            /** @default [] */
            hero: {
                text: string;
                /** Format: uuid */
                fileId: string;
            }[];
        };
        UpdateEcommerceDTO: {
            name?: string;
            /** Format: uuid */
            ecommercePreview: string;
            hero?: {
                /** Format: uuid */
                fileId: string;
                text: string;
            }[];
            style?: {
                name: string;
                isActive: boolean;
                backgroundColor: string;
                textColor: string;
                primaryColor: string;
                secondaryColor: string;
                tertiaryColor: string;
            };
        };
        UpdateEcommerceProductsDTO: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            action: "add" | "remove";
        }[];
        RetrieveEcommerceDTO: {
            /** Format: uuid */
            id: string;
            createdAt: unknown;
            productIds: string[];
            name: string;
            /** Format: uuid */
            companyId: string;
            isActive: boolean;
            previewUrl?: string;
            slug: {
                value: string;
            };
            /** @default [] */
            styles: {
                /** Format: uuid */
                id: string;
                createdAt: unknown;
                name: string;
                isActive: boolean;
                backgroundColor: string;
                textColor: string;
                primaryColor: string;
                secondaryColor: string;
                tertiaryColor: string;
            }[];
            /** @default [] */
            hero: {
                fileId: string;
                text: string;
                fileUrl: string;
            }[];
            updatedAt?: unknown;
        };
        EcommerceProductsDTO: {
            items: {
                id: string;
                name: string;
                quantityInStock: number;
                minimumStock: number;
                manufactureDate: unknown;
                dueDate: unknown;
                validityInDays: number;
                manufacturer?: string;
                batch?: string;
                /** @enum {string} */
                status: "ACTIVE" | "INACTIVE" | "OUT_OF_STOCK";
                productImage?: string;
                price: number;
                categories: {
                    id: string;
                    name: string;
                }[];
                createdAt: unknown;
                updatedAt?: unknown;
                deletedAt?: unknown;
            }[];
            total: number;
            page: number;
        };
        GetEcommerceProductDTO: {
            id: string;
            name: string;
            description: string;
            originalPrice: number;
            finalPrice: number;
            discountPercentage: number;
            quantityInStock: number;
            minimumStock: number;
            manufactureDate: unknown;
            dueDate: unknown;
            validityInDays: number;
            unitOfMeasure: string;
            weight: number;
            dimensions?: {
                height: number;
                width: number;
                length: number;
            };
            manufacturer?: string;
            batch?: string;
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE" | "OUT_OF_STOCK";
            productImage?: string;
            ecommerceId?: string;
            categories: {
                id: string;
                name: string;
                isActive: boolean;
            }[];
            attachments?: {
                id: string;
                filename: string;
                type: string;
                url: string;
            }[];
            createdAt: unknown;
            updatedAt?: unknown;
            deletedAt?: unknown;
        };
        EcommerceCategoriesDTO: {
            /** Format: uuid */
            id: string;
            name: string;
            isActive?: boolean;
            /** Format: uuid */
            iconId?: string;
            createdAt: unknown;
            updatedAt?: unknown;
        }[];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthenticateController_handle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticateDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCompanyDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CompanyController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditCompanyDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_list: {
        parameters: {
            query: {
                page: number;
                perPage: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpCategoryListResponse"];
                };
            };
        };
    };
    CategoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_downloadTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpProductListResponse"];
                };
            };
        };
    };
    ProductController_getStockMovements: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                companyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpProductListResponse"];
                };
            };
        };
    };
    ProductController_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpProductGetResponse"];
                };
            };
        };
    };
    ProductController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductController_updateStock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductStockDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConfigurationController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateConfigurationDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConfigurationController_getConfiguration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpConfigurationGetResponse"];
                };
            };
        };
    };
    ConfigurationController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateConfigurationDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_list: {
        parameters: {
            query?: {
                perPage?: number;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpStyleListResponse"];
                };
            };
        };
    };
    StyleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateStyleDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpStyleGetResponse"];
                };
            };
        };
    };
    StyleController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStyleDTO"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StyleController_chooseActiveStyle: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FileController_uploadFile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpFileCreatedResponse"];
                };
            };
        };
    };
    FileController_getFileUrl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpGetFileUrlResponse"];
                };
            };
        };
    };
    FileController_downloadFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FileController_deleteFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MetricsController_productMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpGetMetricsResponse"];
                };
            };
        };
    };
    MetricsController_stockGeneralMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StockGeneralMetricsResponseDto"];
                };
            };
        };
    };
    InviteController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInviteDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InviteController_accept: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AcceptInviteDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InviteController_getPendings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HttpInviteGetResponse"][];
                };
            };
        };
    };
    InviteController_revoke: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EcommerceController_publishEcommerce: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublishEcommerceDTO"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EcommerceController_retrieveEcommerceByCompanyId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ecommerce retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RetrieveEcommerceDTO"];
                };
            };
        };
    };
    EcommerceController_updateEcommerce: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEcommerceDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EcommerceController_updateProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEcommerceProductsDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EcommerceController_retrieveEcommerce: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EcommerceController_listProducts: {
        parameters: {
            query: {
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page */
                perPage?: number;
                categoryId: string;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Products retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcommerceProductsDTO"];
                };
            };
        };
    };
    EcommerceController_getProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
                productId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEcommerceProductDTO"];
                };
            };
        };
    };
    EcommerceController_listCategories: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcommerceCategoriesDTO"];
                };
            };
        };
    };
}
